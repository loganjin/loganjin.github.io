<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title></title>
    <url>/2022/06/26/%E5%A4%9A%E8%A1%8C%E6%96%87%E6%9C%AC%E6%BA%A2%E5%87%BA%E9%9A%90%E8%97%8F/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>Hexo博客正文图片不显示解决方法</title>
    <url>/2022/06/21/Hexo%E5%8D%9A%E5%AE%A2%E6%AD%A3%E6%96%87%E5%9B%BE%E7%89%87%E4%B8%8D%E6%98%BE%E7%A4%BA%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>将图片放在<code>source/images</code>文件夹中，通过类似于<code>![](/images/image.jpg)</code>的Markdown语法来访问它们，发现图片在博客正文不显示。<br>注：<br>Hexo version: 5.4.2<br>NexT version: 8.12.1</p>
<span id="more"></span>


<p>解决方法：<br>将_config.yml中的<code>post_asset_folder</code>设置为true，通过命令行新建文章，将图片放在伴随命令行指令产生的文件夹中，在通过如<code>&#123;% asset_img example.jpg This is an example image %&#125;</code>的标签插件来引入图片即可。</p>
]]></content>
      <categories>
        <category>程序员的自我修养</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo博客框架命令行指令</title>
    <url>/2022/06/21/Hexo%E5%8D%9A%E5%AE%A2%E6%A1%86%E6%9E%B6%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%8C%87%E4%BB%A4/</url>
    <content><![CDATA[<ul>
<li>创建新文章<figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line">$ hexo <span class="keyword">new</span> [layout] &lt;<span class="built_in">title</span>&gt;</span><br></pre></td></tr></table></figure>
拓：  <table>
<thead>
<tr>
<th>布局（layout）</th>
<th>路径</th>
</tr>
</thead>
<tbody><tr>
<td>post</td>
<td>source/_posts</td>
</tr>
<tr>
<td>page</td>
<td>source</td>
</tr>
<tr>
<td>draft</td>
<td>source/_drafts</td>
</tr>
</tbody></table>
</li>
</ul>
<span id="more"></span>


<ul>
<li><p>清除缓存文件 (db.json) 和已生成的静态文件 (public)<br>hexo clean</p>
</li>
<li><p>生成静态文件<br>hexo g（即hexo generate）</p>
</li>
<li><p>启动服务器：默认情况下，访问网址为：<a href="http://localhost:4000/%E3%80%82">http://localhost:4000/。</a><br>hexo s（即hexo server）</p>
</li>
<li><p>一键部署<br>npm i hexo-deployer-git –save<br>hexo d（即hexo deploy）</p>
</li>
<li><p>文件生成后立即部署网站<br>hexo g -d</p>
</li>
</ul>
]]></content>
      <categories>
        <category>程序员的自我修养</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo博客框架Front-matter语法</title>
    <url>/2022/06/18/Hexo%E5%8D%9A%E5%AE%A2%E6%A1%86%E6%9E%B6Front-matter%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<p>Front-matter is a block of Markdown at the beginning of the file that is used to configure settings for your writings. Front-matter is terminated by three dashes:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">Hello</span> <span class="string">World</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2013</span><span class="string">/7/13</span> <span class="number">20</span><span class="string">:46:25</span></span><br><span class="line"><span class="attr">categories:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">programmer</span></span><br><span class="line"><span class="attr">tags:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">Hexo</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>


<span id="more"></span>


<h2 id="Setting"><a href="#Setting" class="headerlink" title="Setting"></a>Setting</h2><blockquote>
<p>title<br>date: published date<br>categories<br>tags  </p>
</blockquote>
<h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><ul>
<li>使类别并列产生：  <figure class="highlight ldif"><table><tr><td class="code"><pre><span class="line"><span class="attribute">categories</span>:</span><br><span class="line"><span class="literal">-</span> [programmer]</span><br><span class="line"><span class="literal">-</span> [Front-End]</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>程序员的自我修养</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo博客框架NexT主题美化</title>
    <url>/2022/06/18/Hexo%E5%8D%9A%E5%AE%A2%E6%A1%86%E6%9E%B6NexT%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/</url>
    <content><![CDATA[<h2 id="config-yml"><a href="#config-yml" class="headerlink" title="_config.yml"></a>_config.yml</h2><p>After the installation of Hexo and NexT, you may found that there are two configuration files using by Hexo and both called <code>_config.yml</code>: The first one is under site root directory, which contains Hexo’s config. The second one is under theme root directory, which is provided by NexT and contains theme’s config. Let’s call the first one – <code>Hexo config file</code>, and the second one – <code>NexT config file</code>.  </p>
<p>We do not recommend directly modifying the <code>NexT config file</code>. It is quite often running into conflict status when updating NexT theme via git pull, or need to merge configurations manually when upgrading to new releases. For the theme installed through npm, it is also difficult to modify the NexT config file in node_modules.  </p>
<p>In order to resolve this issue, we recommend using the <a href="https://hexo.io/docs/configuration.html#Alternate-Theme-Config">Alternate Theme Config</a> feature to configure theme NexT.</p>
<p>We strongly recommend you to store your theme configuration in one place. But in case you have to store your theme configuration separately, you need to know the priority of those configurations: The theme_config inside site’s primary configuration file has the highest priority during merging, then the dedicated theme configuration file.<br>The _config.yml file under the theme directory has the lowest priority.</p>
<span id="more"></span>


<h2 id="config-yml美化"><a href="#config-yml美化" class="headerlink" title="_config.yml美化"></a>_config.yml美化</h2><blockquote>
<p>title: LIFE×WORK<br>subtitle: ‘知命不惧，日日自新’<br>description: ‘嘿，开心一点嘛’<br>author: Logan Jin<br>language: en<br>timezone: ‘Asia/Shanghai’<br>highlight-&gt;auto_detect<br>theme: next  </p>
</blockquote>
<h2 id="config-next-yml美化"><a href="#config-next-yml美化" class="headerlink" title="_config.next.yml美化"></a>_config.next.yml美化</h2><blockquote>
<p>scheme: Gemini<br>darkmode: true<br>favicon: 建军<br>menu: home、categories、tags<br>menu_settings: badges<br>avatar: me<br>social: Github、E-Mail、Bilibili、Instagram<br>footer: </p>
<blockquote>
<p>since<br>icon-&gt;animated  </p>
</blockquote>
<p>back2top: scrollpercent<br>canvas_ribbon<br>npm install hexo-generator-searchdb<br>hexo new page tags<br>tag_icon: true<br>帖子部分显示，存在显示全文：<!--more--></p>
</blockquote>
]]></content>
      <categories>
        <category>程序员的自我修养</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>VSCode配置</title>
    <url>/2022/06/20/VSCode%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>对VSCode配置进行总结。</p>
<span id="more"></span>


<h2 id="VSCode快捷键"><a href="#VSCode快捷键" class="headerlink" title="VSCode快捷键"></a>VSCode快捷键</h2><ul>
<li>跳到下一行：Ctrl + Enter</li>
<li>单行注释：Ctrl + /</li>
<li>多行注释：Ctrl + Shift + /<blockquote>
<p>VSCode默认为Shift + Alt + A，需要手动修改</p>
</blockquote>
</li>
<li>添加多个光标：Ctrl + Alt + 上下箭头</li>
</ul>
<h2 id="VSCode插件"><a href="#VSCode插件" class="headerlink" title="VSCode插件"></a>VSCode插件</h2><h3 id="VSCode基础插件"><a href="#VSCode基础插件" class="headerlink" title="VSCode基础插件"></a>VSCode基础插件</h3><table>
<thead>
<tr>
<th>插件名称</th>
<th>插件作用</th>
</tr>
</thead>
<tbody><tr>
<td>One Dark Pro</td>
<td>暗黑主题，选择One Dark Pro Darker</td>
</tr>
<tr>
<td>vscode-icons</td>
<td>替换成好认的图标</td>
</tr>
<tr>
<td>indent-rainbow</td>
<td>s使得缩进更好认（交替四种颜色，错了变红）</td>
</tr>
<tr>
<td>Indenticator</td>
<td>Highlights your current indent depth</td>
</tr>
<tr>
<td>Code Spell Checker</td>
<td>Spelling checker for source code</td>
</tr>
<tr>
<td>Project Manager</td>
<td>Easily switch between projects</td>
</tr>
<tr>
<td>Markdown All in One</td>
<td>All you need to write Markdown</td>
</tr>
<tr>
<td>Bookmarks</td>
<td>Mark lines and jump to them</td>
</tr>
<tr>
<td>GitLens — Git supercharged</td>
<td>相比于VSCode内置Git，增加了branches、remotes、stashes、tags、contributors</td>
</tr>
<tr>
<td>Git Graph</td>
<td>图形化显示提交历史</td>
</tr>
</tbody></table>
<h3 id="VSCode前端插件"><a href="#VSCode前端插件" class="headerlink" title="VSCode前端插件"></a>VSCode前端插件</h3><table>
<thead>
<tr>
<th>插件名称</th>
<th>插件作用</th>
</tr>
</thead>
<tbody><tr>
<td>Live Server</td>
<td>Launch a development local Server with live reload feature for static &amp; dynamic pages</td>
</tr>
<tr>
<td>Image preview</td>
<td>光标悬浮在图片路径上时，显示图片预览</td>
</tr>
<tr>
<td>Auto Rename Tag</td>
<td>Auto rename paired HTML/XML tag</td>
</tr>
<tr>
<td>Auto Close Tag</td>
<td>Automatically add HTML/XML close tag</td>
</tr>
<tr>
<td>CSS Peek</td>
<td>Allow peeking to css ID and class strings as definitions from html files to respective CSS. Allows peek and goto definition</td>
</tr>
<tr>
<td>Vetur</td>
<td>Syntax highlighting</td>
</tr>
<tr>
<td>Vue 3 Snippets</td>
<td>A Vue.js 3 And Vue.js 2 Code Snippets Extension</td>
</tr>
<tr>
<td>ESLint</td>
<td>代码质量校验工具</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>程序员的自我修养</category>
      </categories>
      <tags>
        <tag>VSCode</tag>
      </tags>
  </entry>
  <entry>
    <title>href、src的区别</title>
    <url>/2022/06/21/href%E3%80%81src%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<ul>
<li>href：<br>表示超文本引用，指向网络资源，建立和当前元素或文档的链接关系。当浏览器识别到它指向的文件时，就会并行下载资源，不会停止对当前文档的处理。<br>常在a、link标签中。</li>
</ul>
<ul>
<li>src：<br>表示资源引用，指向外部资源，指向的内容会嵌入到当前标签的位置。当浏览器解析到该元素时，会暂停其他资源的下载和处理，直到将该资源加载、编译、执行完毕，所以js脚本一般放在页面底部。</li>
</ul>
]]></content>
      <categories>
        <category>面试题</category>
      </categories>
      <tags>
        <tag>HTML面试题</tag>
      </tags>
  </entry>
  <entry>
    <title>data为什么是一个函数而不是对象</title>
    <url>/2022/06/23/data%E4%B8%BA%E4%BB%80%E4%B9%88%E6%98%AF%E4%B8%80%E4%B8%AA%E5%87%BD%E6%95%B0%E8%80%8C%E4%B8%8D%E6%98%AF%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<p>（基础知识）</p>
<span id="more"></span>


<p><code>组件</code>实例对象data必须为函数，目的是为了防止多个组件实例对象之间共用一个data，产生数据污染。采用函数的形式，initData时会将其作为工厂函数返回全新data对象，有效规避多实例对象之间数据污染问题；而由于根实例是<code>单例</code>，不会产生数据污染情况，所以<code>根</code>实例对象data可以是对象也可以是函数。</p>
]]></content>
      <categories>
        <category>面试题</category>
      </categories>
      <tags>
        <tag>Vue面试题</tag>
      </tags>
  </entry>
  <entry>
    <title>个人博客搭建</title>
    <url>/2022/06/17/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<p>本博客基于Hexo框架搭建，使用NexT主题。</p>
<h2 id="博客框架分类"><a href="#博客框架分类" class="headerlink" title="博客框架分类"></a>博客框架分类</h2><blockquote>
<p>动态博客</p>
<blockquote>
<p><a href="https://wordpress.com/zh-cn/">WordPress</a>，基于Php  </p>
</blockquote>
</blockquote>
<blockquote>
<p>静态博客  </p>
<blockquote>
<p><a href="https://hexo.io/zh-cn/">Hexo</a>，基于JavaScript<br><a href="https://jekyllrb.com/">Jekyll</a><br><a href="https://gohugo.io/">Hugo</a>，基于Go<br><a href="https://vuepress.vuejs.org/zh/">VuePress</a><br><a href="https://b3log.org/solo/">Solo</a>，基于Java  </p>
</blockquote>
</blockquote>
<span id="more"></span>


<h2 id="Hexo操作"><a href="#Hexo操作" class="headerlink" title="Hexo操作"></a>Hexo操作</h2><figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="meta"># 安装Hexo</span></span><br><span class="line">npm i hexo-<span class="keyword">cli</span> -g</span><br><span class="line"></span><br><span class="line"><span class="meta"># 初始化博客</span></span><br><span class="line">hexo init</span><br><span class="line"></span><br><span class="line"><span class="meta"># 在_config.yml中修改参数</span></span><br><span class="line"><span class="symbol">type:</span> git</span><br><span class="line"><span class="symbol">repository:</span> git@github.com:loganjin/loganjin.github.io.git</span><br><span class="line"><span class="symbol">branch:</span> main</span><br><span class="line"></span><br><span class="line"><span class="meta"># 清除缓存文件 (db.json) 和已生成的静态文件 (public)</span></span><br><span class="line">hexo clean</span><br><span class="line"></span><br><span class="line"><span class="meta"># 生成静态文件</span></span><br><span class="line">hexo g（即hexo generate）</span><br><span class="line"></span><br><span class="line"><span class="meta"># 启动服务器：默认情况下，访问网址为：http://localhost:4000/。</span></span><br><span class="line">hexo s（即hexo server）</span><br><span class="line"></span><br><span class="line"><span class="meta"># 一键部署</span></span><br><span class="line">npm i hexo-deployer-git --save</span><br><span class="line">hexo d（即hexo deploy）</span><br><span class="line"></span><br><span class="line"><span class="meta"># 文件生成后立即部署网站</span></span><br><span class="line">hexo g -d</span><br></pre></td></tr></table></figure>


<h2 id="Hexo文件夹解析"><a href="#Hexo文件夹解析" class="headerlink" title="Hexo文件夹解析"></a>Hexo文件夹解析</h2><blockquote>
<p>.deploy.git（hexo d时生成）<br>.git<br>node_modules（npm install时生成）<br>public（hexo g时生成）<br>scaffolds: 文章模板文件夹<br>source: 源文件夹<br>themes: 主题文件夹  </p>
<blockquote>
<p>_config.yml: 主题配置文件  </p>
</blockquote>
<p>.gitignore<br>_config.yml: Hexo配置文件<br>db.json: 缓存文件<br>package.json  </p>
</blockquote>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul>
<li>前期配置好nodejs、git。</li>
<li>所有命令在目标文件夹的git bash中执行。</li>
</ul>
<h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><ul>
<li>Hexo can not display NexT theme, the website only shows text below with white background:<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">extends</span></span> &#x27;_layout.swig&#x27; %&#125;</span><span class="language-xml"> </span><span class="template-tag">&#123;% <span class="name">import</span> &#x27;_macro/post.swig&#x27; <span class="keyword">as</span> post_template %&#125;</span><span class="language-xml"> </span><span class="template-tag">&#123;% <span class="name">import</span> &#x27;_macro/sidebar.swig&#x27; <span class="keyword">as</span> sidebar_template %&#125;</span><span class="language-xml"> </span><span class="template-tag">&#123;% <span class="name"><span class="name">block</span></span> title %&#125;</span><span class="template-variable">&#123;&#123; config.title &#125;&#125;</span><span class="template-tag">&#123;% <span class="name"><span class="name">if</span></span> theme.index_with_subtitle and config.subtitle %&#125;</span><span class="language-xml"> - </span><span class="template-variable">&#123;&#123;config.subtitle &#125;&#125;</span><span class="template-tag">&#123;% <span class="name"><span class="name">endif</span></span> %&#125;</span><span class="template-tag">&#123;% <span class="name"><span class="name">endblock</span></span> %&#125;</span><span class="language-xml"> </span><span class="template-tag">&#123;% <span class="name"><span class="name">block</span></span> page_class %&#125;</span><span class="language-xml"> </span><span class="template-tag">&#123;% <span class="name"><span class="name">if</span></span> is_home() %&#125;</span><span class="language-xml">page-home</span><span class="template-tag">&#123;% <span class="name"><span class="name">endif</span></span> -%&#125;</span><span class="language-xml"> </span><span class="template-tag">&#123;% <span class="name"><span class="name">endblock</span></span> %&#125;</span><span class="language-xml"> </span><span class="template-tag">&#123;% <span class="name"><span class="name">block</span></span> content %&#125;</span><span class="template-tag">&#123;% <span class="name"><span class="name">for</span></span> post <span class="keyword">in</span> page.posts %&#125;</span><span class="language-xml"> </span><span class="template-variable">&#123;&#123; post_template.render(post, true) &#125;&#125;</span><span class="language-xml"> </span><span class="template-tag">&#123;% <span class="name"><span class="name">endfor</span></span> %&#125;</span><span class="template-tag">&#123;% <span class="name"><span class="name">include</span></span> &#x27;_partials/pagination.swig&#x27; %&#125;</span><span class="language-xml"> </span><span class="template-tag">&#123;% <span class="name"><span class="name">endblock</span></span> %&#125;</span><span class="language-xml"> </span><span class="template-tag">&#123;% <span class="name"><span class="name">block</span></span> sidebar %&#125;</span><span class="language-xml"> </span><span class="template-variable">&#123;&#123; sidebar_template.render(false) &#125;&#125;</span><span class="language-xml"> </span><span class="template-tag">&#123;% <span class="name"><span class="name">endblock</span></span> %&#125;</span></span><br></pre></td></tr></table></figure>
install <code>hexo-renderer-swig</code> manually:<figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">npm</span> i hexo-renderer-swig</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>程序员的自我修养</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>什么是DOM和BOM？</title>
    <url>/2022/06/23/%E4%BB%80%E4%B9%88%E6%98%AFDOM%E5%92%8CBOM%EF%BC%9F/</url>
    <content><![CDATA[<p>（Web APIs）</p>
<span id="more"></span>


<ul>
<li>DOM：<br>指的是文档对象模型，它指的是把文档当做一个对象，这个对象主要定义了处理网页内容的方法和接口。</li>
</ul>
<ul>
<li>BOM：<br>指的是浏览器对象模型，它指的是把浏览器当做一个对象来对待，这个对象主要定义了与浏览器进行交互的方法和接口。<br>BOM的核心是window，而window对象具有双重角色，它既是js访问浏览器窗口的一个接口，又是一个全局（Global）对象，定义在全局作用域中的变量、函数都会变成window对象的属性和方法。window对象含有location对象、navigator对象、screen对象等子对象，并且DOM的最根本的对象document对象也是window对象的子对象。</li>
</ul>
]]></content>
      <categories>
        <category>面试题</category>
      </categories>
      <tags>
        <tag>JS面试题</tag>
      </tags>
  </entry>
  <entry>
    <title>单行文本溢出隐藏</title>
    <url>/2022/06/26/%E5%8D%95%E8%A1%8C%E6%96%87%E6%9C%AC%E6%BA%A2%E5%87%BA%E9%9A%90%E8%97%8F/</url>
    <content><![CDATA[<p>（开发）</p>
<span id="more"></span>


<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 强制一行内显示所有文本 */</span></span><br><span class="line"><span class="attribute">white-space</span>: nowrap;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 文本超过限定宽度时，溢出隐藏 */</span></span><br><span class="line"><span class="attribute">overflow</span>: hidden;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 当文本溢出时用省略号代替超出的部分 */</span></span><br><span class="line"><span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>面试题</category>
      </categories>
      <tags>
        <tag>CSS面试题</tag>
      </tags>
  </entry>
  <entry>
    <title>代码输出结果0</title>
    <url>/2022/06/23/%E4%BB%A3%E7%A0%81%E8%BE%93%E5%87%BA%E7%BB%93%E6%9E%9C0/</url>
    <content><![CDATA[<p>（代码输出结果）</p>
<img src="/2022/06/23/%E4%BB%A3%E7%A0%81%E8%BE%93%E5%87%BA%E7%BB%93%E6%9E%9C0/%E4%BB%A3%E7%A0%81%E8%BE%93%E5%87%BA%E7%BB%93%E6%9E%9C0.png" class="">


<span id="more"></span>


<p>JS的数组实际上为对象，对于<code>arr[0]=1;</code>而言，0实际上为属性的名字，而JS属性的名字只能是字符串，所以JS会自动把<code>0</code>转换为<code>&#39;0&#39;</code>，即arr[0]等价于arr[‘0’]。</p>
]]></content>
      <categories>
        <category>面试题</category>
      </categories>
      <tags>
        <tag>JS面试题</tag>
      </tags>
  </entry>
  <entry>
    <title>土松记</title>
    <url>/2022/06/20/%E5%9C%9F%E6%9D%BE%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><ul>
<li><p>颜色：<br>纯白黄耳、纯黑、四眼比较少见。  </p>
</li>
<li><p>脑后骨头凸出来：<br>这种狗大部分很乖。</p>
</li>
<li><p>鼻子湿润：<br>健康。</p>
</li>
<li><p>呼吸平稳：<br>健康。</p>
</li>
</ul>
<span id="more"></span>


<h2 id="伴侣犬"><a href="#伴侣犬" class="headerlink" title="伴侣犬"></a>伴侣犬</h2><h2 id="保镖犬"><a href="#保镖犬" class="headerlink" title="保镖犬"></a>保镖犬</h2><ul>
<li>耳朵塌下去。</li>
<li>四肢粗壮。  </li>
</ul>
<h2 id="梦中情狗"><a href="#梦中情狗" class="headerlink" title="梦中情狗"></a>梦中情狗</h2><ol>
<li>黑熊精。</li>
<li>伴侣犬。</li>
<li>立耳。</li>
</ol>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://space.bilibili.com/2136759778">冷风寻犬</a></p>
]]></content>
      <categories>
        <category>life</category>
      </categories>
      <tags>
        <tag>修勾</tag>
      </tags>
  </entry>
  <entry>
    <title>基于Hexo博客框架的多设备博客管理</title>
    <url>/2022/06/18/%E5%9F%BA%E4%BA%8EHexo%E7%9A%84%E5%A4%9A%E8%AE%BE%E5%A4%87%E5%8D%9A%E5%AE%A2%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<h2 id="Hexo机制"><a href="#Hexo机制" class="headerlink" title="Hexo机制"></a>Hexo机制</h2><p>Hexo部署到GitHub上面的只有<code>.deploy_git</code>文件夹内的静态文件，原始文件仍在本地<code>blog</code>文件夹中。</p>
<span id="more"></span>


<h2 id="操作步骤（未有博客）"><a href="#操作步骤（未有博客）" class="headerlink" title="操作步骤（未有博客）"></a>操作步骤（未有博客）</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建本地blog文件夹，同步到GitHub。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在Github仓库新建hexo分支，并将其设置为默认分支。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># git clone git@github.com:loganjin/loganjin.github.io.git到本地电脑，删除除.git文件夹外全部文件。  </span></span><br><span class="line">attention: 因为默认分支已经设成了hexo分支，所以<span class="built_in">clone</span>时只<span class="built_in">clone</span>了hexo分支，<span class="built_in">clone</span>这个空仓库是为了其中隐藏的.git文件夹，从而达到通过git操作hexo分支管理博客文件的目的。</span><br><span class="line"></span><br><span class="line"><span class="comment">#将.git文件夹复制到本地blog文件夹。</span></span><br><span class="line"></span><br><span class="line">这样就可以通过main分支管理静态文件(hexo操作)，hexo分支管理博客文件(git操作)。</span><br><span class="line"></span><br><span class="line">attention: 由于git不能嵌套上传，如果存在git <span class="built_in">clone</span>主题操作，应该将themes文件夹内的.git文件夹删除。</span><br></pre></td></tr></table></figure>


<h2 id="操作步骤（已有博客）"><a href="#操作步骤（已有博客）" class="headerlink" title="操作步骤（已有博客）"></a>操作步骤（已有博客）</h2><figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在Github仓库新建hexo分支，并将其设置为默认分支。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># git clone git@github.com:loganjin/loganjin.github.io.git到本地电脑，生成loganjin.github.io文件夹。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在本地loganjin.github.io文件夹下依次执行npm i hexo-cli -g、npm install和npm i hexo-deployer-git --save。  </span></span><br><span class="line">attention: 此时如果使用hexo init，会初始化博客，最外层的_config.yml文件会恢复成默认值，新生成的<span class="string">.git</span>文件夹会覆盖我们需要的<span class="string">.git</span>文件夹。</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改_config.yml中的deploy参数为main。</span></span><br><span class="line"></span><br><span class="line">这样就可以通过main分支管理静态文件<span class="params">(hexo操作)</span>，hexo分支管理博客文件<span class="params">(git操作)</span>。</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>程序员的自我修养</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>v-model的实现原理</title>
    <url>/2022/06/23/v-model%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<p>（基础知识）</p>
<span id="more"></span>


<p>v-model可以实现数据的双向绑定，原因在于：  </p>
<img src="/2022/06/23/v-model%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/v-model%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86.png" class="">
]]></content>
      <categories>
        <category>面试题</category>
      </categories>
      <tags>
        <tag>Vue面试题</tag>
      </tags>
  </entry>
  <entry>
    <title>对HTML5语义化的理解</title>
    <url>/2022/06/21/%E5%AF%B9HTML5%E8%AF%AD%E4%B9%89%E5%8C%96%E7%9A%84%E7%90%86%E8%A7%A3/</url>
    <content><![CDATA[<p>(HTML5)</p>
<span id="more"></span>


<ul>
<li>语义化定义：<br>语义化是根据内容的结构化（内容语义化），选择合适的标签（代码语义化），通俗的讲就是用正确的标签做正确的事情。  </li>
</ul>
<ul>
<li>语义化的优点：<br>1：对机器友好,有利于SEO；有利于机器爬虫，它能够更加直接地爬取到想要的内容。<br>2：对开发者友好，使用语义化标签减少了类名的使用，让结构更加清晰，增强可读性，便于开发和维护。</li>
</ul>
<ul>
<li>常见的语义化标签：<br>header：头部标签<br>nav：导航标签<br>article：内容标签<br>section：块级标签<br>aside：侧边栏标签<br>footer：尾部标签     <img src="/2022/06/21/%E5%AF%B9HTML5%E8%AF%AD%E4%B9%89%E5%8C%96%E7%9A%84%E7%90%86%E8%A7%A3/%E5%B8%B8%E8%A7%81%E7%9A%84%E8%AF%AD%E4%B9%89%E5%8C%96%E6%A0%87%E7%AD%BE.png" class=""></li>
</ul>
]]></content>
      <categories>
        <category>面试题</category>
      </categories>
      <tags>
        <tag>HTML面试题</tag>
      </tags>
  </entry>
  <entry>
    <title>对Vue组件化的理解</title>
    <url>/2022/06/23/%E5%AF%B9Vue%E7%BB%84%E4%BB%B6%E5%8C%96%E7%9A%84%E7%90%86%E8%A7%A3/</url>
    <content><![CDATA[<p>（基础知识）</p>
<span id="more"></span>


<p>如果我们将一个页面中所有的处理逻辑全部放在一起，处理起来就会变得非常复杂，而且不利于后续的管理及扩展。但如果我们将一个页面拆分成一个个小的功能块，每个功能块完成属于自己这部分独立的功能，那么之后整个页面的管理维护就变得非常容易了，这就是组件化开发。<br>组件是独立、可复用的代码组织单元，能让我们的代码更加方便组织和管理，并且扩展性更强；遵循单向数据流的原则。</p>
]]></content>
      <categories>
        <category>面试题</category>
      </categories>
      <tags>
        <tag>Vue面试题</tag>
      </tags>
  </entry>
  <entry>
    <title>对比methods和computed</title>
    <url>/2022/06/23/%E5%AF%B9%E6%AF%94Methods%E5%92%8CComputed/</url>
    <content><![CDATA[<p>（基础知识）</p>
<span id="more"></span>


<ul>
<li>相同点：<br>methods和computed最终结果相同。</li>
</ul>
<ul>
<li>不同点：<br>computed会进行<code>缓存</code>,多次使用会观察有没有变化：没有变化就直接返回原有结果，不会重新调用，有变化会重新调用一次；methods每次使用都会调用一次。</li>
</ul>
]]></content>
      <categories>
        <category>面试题</category>
      </categories>
      <tags>
        <tag>Vue面试题</tag>
      </tags>
  </entry>
  <entry>
    <title>对比v-if和v-show</title>
    <url>/2022/06/23/%E5%AF%B9%E6%AF%94v-if%E5%92%8Cv-show/</url>
    <content><![CDATA[<p>（基础知识）</p>
<span id="more"></span>


<ol>
<li>相同点：<br>在vue中v-if(不含v-else)和v-show的作用效果是相同的，都能控制元素在页面是否显示：当表达式为true的时候，都会占据页面的位置；当表达式为false的时候，都不会占据页面位置。</li>
</ol>
<ol start="2">
<li><p>不同点：  </p>
<ol>
<li><p>控制手段：v-if显示隐藏是动态的向DOM树内添加或删除DOM元素；v-show隐藏则是为该元素添加<code>display:none</code>，DOM元素依旧还在。</p>
</li>
<li><p>编译过程：v-if切换有一个局部编译/卸载的过程，切换过程中合适地销毁和重建内部的事件监听和子组件；v-show只是简单的基于CSS切换。</p>
</li>
<li><p>编译条件：v-if是真正的条件渲染，它会确保在切换过程中条件块内的事件监听器和子组件合适地被销毁和重建：只有渲染条件为假时，并不做操作，直到为真才渲染； v-show是在任何条件下，无论首次条件是否为真，都被编译，然后被缓存，而且保留DOM元素。</p>
</li>
<li><p>性能消耗：v-if有更高的切换消耗，v-show有更高的初始渲染消耗。</p>
</li>
<li><p>使用场景：v-if由于直接操作DOM节点增加或删除，所以相比v-show开销更大。如果在运行时条件很少改变，则使用 v-if 较好；如果需要非常频繁地切换，则使用 v-show 较好。</p>
</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>面试题</category>
      </categories>
      <tags>
        <tag>Vue面试题</tag>
      </tags>
  </entry>
  <entry>
    <title>麻婆豆腐</title>
    <url>/2022/06/22/%E9%BA%BB%E5%A9%86%E8%B1%86%E8%85%90/</url>
    <content><![CDATA[<h2 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h2><ul>
<li><p>有花椒味方法：<br>做菜时不能直接放花椒，先<code>焙</code>（热锅，直接加花椒，小火慢慢加热），晾凉，再用擀面杖<code>碾碎</code>。</p>
</li>
<li><p>豆腐入锅前放一勺盐的作用：<br>让豆腐通过加热，<code>去掉豆腐的豆腥味</code>，让豆腐的蛋白质凝固，出锅以后<code>不容易碎</code>。</p>
</li>
<li><p>老豆腐要换一到俩遍水的原因：<br>老豆腐有卤水味道。</p>
</li>
<li><p>豆瓣酱、干豆豉剁碎原因：<br><code>让味道出来</code>。</p>
</li>
<li><p>豆瓣酱、干豆豉放一起剁原因：<br>有豆瓣酱揽着，干豆豉不容易跑。</p>
</li>
<li><p>豆瓣酱、干豆豉都需要原因：<br>豆瓣酱属于酱缸子发酵，豆豉属于干巴发酵，酱味和层次都不一样。  </p>
</li>
<li><p>放入牛肉末和豆瓣酱之后马上放入大葱和姜的原因：<br><code>降低油的温度</code>、煸出来更香。  </p>
</li>
<li><p>为啥要先放一部分花椒面：<br><code>怕吃到最后没味</code>。 </p>
</li>
<li><p>为啥烧菜不入味：<br><code>咕嘟时间太短就勾芡</code>，时间太短。</p>
</li>
<li><p>从勾芡起至出锅全程用勺背从四周向锅内推豆腐原因：<br>怕豆腐碎。  </p>
</li>
</ul>
<span id="more"></span>


<h2 id="材料："><a href="#材料：" class="headerlink" title="材料："></a>材料：</h2><p>牛肉末、淀粉、干花椒、嫩豆腐、郫县豆瓣酱（灵魂）、干豆豉，大葱、姜，青蒜（其实就是蒜苗）、花生油（可用菜籽油）、黄酒、酱油、老抽、水、糖。</p>
<h2 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h2><p>1：剁牛肉末，调勾芡的淀粉糊，洗并泡好干豆豉。<br>2：小火<code>焙</code>花椒直至闻到香味，出锅，<code>晾凉</code>。<br>3：切豆腐，片去嫩豆腐顶端的一层（原因未知，猜测是为了整齐），把豆腐切成长宽高大约<code>一个指节长度</code>的小块，锅里放水，<code>一勺盐</code>，豆腐下锅。<br>4：等水开期间把豆瓣酱、洗并泡好的干豆豉放在一起剁碎。<br>5：擀碎放凉的花椒，过筛。<br>（如果豆腐锅里的水开了，就<code>盖上锅盖闷着</code>）<br>6：切小料，大葱和姜1:1（<code>分量为盘子大小</code>），切青蒜。<br>7：向另一个锅里加入油，热油。放入牛肉末，煸好；加入豆瓣酱，煸好；放入大葱和姜，煸好；放入辣椒面，煸好；放入黄酒、酱油、老抽（第一次）、水、糖、老抽（第二次）；下豆腐；先放入一部分花椒面；<code>多咕嘟一会</code>；<code>三次勾芡</code>，<code>第二次勾芡调至中火</code>；分两次加入三分之二的青蒜，出锅。<br>8：在顶部撒入青蒜和花椒面，完成。  </p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.bilibili.com/video/BV1it4y1X75m?spm_id_from=333.1007.top_right_bar_window_default_collection.content.click&vd_source=7bfc63e37b43d920ff112a7b729b0a36">老饭骨麻婆豆腐</a></p>
]]></content>
      <categories>
        <category>life</category>
      </categories>
      <tags>
        <tag>嗝</tag>
      </tags>
  </entry>
</search>
